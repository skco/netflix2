[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\skco\AppData\Local\Temp\2\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\skco\AppData\Local\Temp\2\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.2 (Amazon.com Inc. Java 1.8.0_362)
[debug]       Load.loadUnit: plugins took 178.1162ms
[debug]       Load.loadUnit: defsScala took 0.9098ms
[debug] [Loading] Scanning directory C:\Users\skco\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\skco\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 33.431899 ms
[debug]           Load.resolveProject(global-plugins) took 97.1896ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\skco\.sbt\1.0\plugins, plugins: List(<none>))) took 190.398ms
[debug] [Loading] Done in C:\Users\skco\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 231.719299ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.578001ms
[debug]     Load.loadUnit(file:/C:/Users/skco/.sbt/1.0/plugins/, ...) took 427.016501ms
[debug]   Load.apply: load took 818.5687ms
[debug]   Load.apply: resolveProjects took 10.9468ms
[debug]   Load.apply: finalTransforms took 101.3471ms
[debug]   Load.apply: config.delegates took 10.3327ms
[debug]   Load.apply: Def.make(settings)... took 592.4166ms
[debug]   Load.apply: structureIndex took 169.0866ms
[debug]   Load.apply: mkStreams took 2.919101ms
[info] loading global plugins from C:\Users\skco\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3479.7777ms
[debug]           Load.loadUnit: plugins took 49.7175ms
[debug]           Load.loadUnit: defsScala took 0.004699ms
[debug] [Loading] Scanning directory C:\Users\skco\Desktop\netflix\project
[debug]             Load.loadUnit: mkEval took 13.1264ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\skco\Desktop\netflix\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 4.018 ms
[info] loading settings for project netflix-build from idea.sbt ...
[debug]               Load.resolveProject(netflix-build) took 5.1051ms
[debug]             Load.loadTransitive: finalizeProject(Project(id netflix-build, base: C:\Users\skco\Desktop\netflix\project, plugins: List(<none>))) took 10.072299ms
[debug] [Loading] Done in C:\Users\skco\Desktop\netflix\project, returning: (netflix-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 3133.1198ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.8633ms
[debug]         Load.loadUnit(file:/C:/Users/skco/Desktop/netflix/project/, ...) took 3188.9261ms
[debug]       Load.apply: load took 3190.447501ms
[debug]       Load.apply: resolveProjects took 0.1715ms
[debug]       Load.apply: finalTransforms took 11.328ms
[debug]       Load.apply: config.delegates took 0.7807ms
[debug]       Load.apply: Def.make(settings)... took 300.0777ms
[debug]       Load.apply: structureIndex took 51.9126ms
[debug]       Load.apply: mkStreams took 0.0039ms
[info] loading project definition from C:\Users\skco\Desktop\netflix\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 5453.6068ms
[debug]     Load.loadUnit: defsScala took 0.0037ms
[debug] [Loading] Scanning directory C:\Users\skco\Desktop\netflix
[debug]       Load.loadUnit: mkEval took 0.279599ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\skco\Desktop\netflix, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 4.6057 ms
[info] loading settings for project netflix from build.sbt ...
[debug]         Load.resolveProject(netflix) took 55.273101ms
[debug]       Load.loadTransitive: finalizeProject(Project(id netflix, base: C:\Users\skco\Desktop\netflix, plugins: List(<none>))) took 62.067001ms
[debug] [Loading] Done in C:\Users\skco\Desktop\netflix, returning: (netflix)
[debug]     Load.loadUnit: loadedProjectsRaw took 1486.225399ms
[debug]     Load.loadUnit: cleanEvalClasses took 9.8068ms
[debug]   Load.loadUnit(file:/C:/Users/skco/Desktop/netflix/, ...) took 6950.6287ms
[debug] Load.apply: load took 6953.235001ms
[debug] Load.apply: resolveProjects took 0.195601ms
[debug] Load.apply: finalTransforms took 28.515899ms
[debug] Load.apply: config.delegates took 0.344499ms
[debug] Load.apply: Def.make(settings)... took 69.3158ms
[debug] Load.apply: structureIndex took 28.993701ms
[debug] Load.apply: mkStreams took 0.003299ms
[info] set current project to netflix (in build file:/C:/Users/skco/Desktop/netflix/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 50716 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 50716, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to netflix (in build file:/C:/Users/skco/Desktop/netflix/)
[debug] > Exec(idea-shell, None, None)
